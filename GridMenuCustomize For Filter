
@{
    ViewBag.Title = "Bank Payment Voucher List";

    ViewBag.IsMaster = @Session["IsMaster"];
}

<script src="~/Content/assets/ngscripts/angular.js"></script>
<script src="~/Content/assets/ui-grid/angular/angular-touch.js"></script>
<script src="~/Content/assets/ui-grid/angular/angular-animate.js"></script>
<script src="~/Content/assets/ui-grid/grunt-scripts/csv.js"></script>
<script src="~/Content/assets/ui-grid/grunt-scripts/pdfmake.js"></script>
<script src="~/Content/assets/ui-grid/grunt-scripts/vfs_fonts.js"></script>
<script src="~/Content/assets/ui-grid/grunt-scripts/lodash.min.js"></script>
<script src="~/Content/assets/ui-grid/grunt-scripts/jszip.min.js"></script>
<script src="~/Content/assets/ui-grid/grunt-scripts/excel-builder.dist.js"></script>
<script src="~/Content/assets/ui-grid/ui-grid.core.min.js"></script>
<script src="~/Content/assets/ui-grid/ui-grid.exporter.min.js"></script>
<script src="~/Content/assets/ui-grid/ui-grid.selection.min.js"></script>
<script src="~/Content/assets/ui-grid/autoFitColumns.min.js"></script>
<script src="~/Content/assets/ui-grid/ui-grid.js"></script>
<link href="~/Content/assets/ui-grid/ui-grid.css" rel="stylesheet" />
<!-- start:  List page -->
<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<section class="panel" ng-app="ngGridApp" ng-controller="ngGridCtrl">

    @using (Html.BeginForm())
    {
        <div class="panel-body">
            <span ng-init="IsMaster=@ViewBag.IsMaster "></span>
            <header class="p-xs mr-lg">
                <div class="row mb-md">
                    <div class="col-md-12">
                        <div class="col-md-3">
                            @Html.Label("From Date", htmlAttributes: new { @class = "control-label" })
                            @Html.Editor("dtFrom", new { htmlAttributes = new { @class = "form-control", @id = "date", datepicker = "", ng_model = "dtFrom", @placeholder = "", @required = "required" } })
                        </div>

                        <div class="col-md-3">
                            @Html.Label("To Date", htmlAttributes: new { @class = "control-label" })
                            @Html.Editor("dtTo", new { htmlAttributes = new { @class = "form-control", @id = "date1", ng_model = "dtTo", @placeholder = "", datepicker = "", @required = "required" } })
                        </div>


                        <div class="col-sm-3 p-none mt-md pl-md pull-left">

                            <button type="button" class="mb-xs mt-xs mr-xs mt-sm btn" value="Load" ng-click="DataLoad(dtFrom,dtTo)" style="background-color:#595959; color:Yellow">
                                <i class="fa fa-refresh" aria-hidden="true"></i> Load List
                            </button>

                            <a href="@Url.Action("CreateBPV", "AcmVoucherGrid")" class="mb-xs mt-xs mr-xs mt-sm btn  btn-default ">
                                <i class="fa fa-plus" aria-hidden="true"></i> Add New
                            </a>
                        </div>


                    </div>
                </div>
                <hr class="mb-none mt-none" />
            </header>



            <!-- end: page -->
            <!-- : loading..... -->
            <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
            </div>

            <div ui-grid="gridOptions" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                 style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important;" class="grid"></div>
        </div>
    }




</section>







<script type="text/javascript">

    var ngGridApp = angular.module('ngGridApp', ['ngTouch', 'ui.grid', 'ui.grid.expandable', 'ui.grid.selection',
        'ui.grid.pinning', 'ui.grid.exporter', 'ui.grid.resizeColumns', 'ui.grid.autoResize', 'ui.grid.saveState', 'ui.grid.cellNav']);

    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', '$interval', '$rootScope','uiGridConstants', function ($scope, $http, $log, $filter,uiGridConstants) {
        $scope.showLoader = false;
        $scope.dtFrom = $filter("date")(Date.now(), 'dd-MMM-yyyy');
        $scope.dtTo = $filter("date")(Date.now(), 'dd-MMM-yyyy');
        $scope.blargh = function () {
            alert("I'm in the outer scope!");
        };
        $scope.IsMaster = '';
        $scope.gridOptions = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: true,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [05, 05, , 05] },
            exporterPdfTableHeaderStyle: { fontSize: 8, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "Bank Payment Voucher List", style: 'headerStyle', fontSize: 14, bold: true },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { margin: [20, 20, 20, 20], alignment: 'center' };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: false, alignment: 'center' };
                return docDefinition;
            },
            exporterPdfOrientation: 'portrait',
            exporterPdfPageSize: 'LETTER',
            exporterPdfMaxGridWidth: 500,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true,
            // Default: End
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
            }
        }


        $scope.gridOptions.columnDefs = [
            , { name: 'Voucher No', field: 'VoucherNo', width: 250 }
            , { name: ' Date', field: 'VoucherDate', width: 120 }
            , {
                name: ' Amount', field: 'VoucherAmount', width: 100,
                menuItems: [
                    {
                        title: 'Outer Scope Alert',
                        icon: 'ui-grid-icon-info-circled',
                        action: function ($event) {
                            this.grid.options.enableFiltering = !this.grid.options.enableFiltering;
                            this.grid.api.core.notifyDataChange(uiGridConstants.filter.GREATER_THAN
                            );
                        },
                       
                      
                    }
                ]
            }
            , { name: 'Entry By ', field: 'EntryBy', width: 220 }
            , { name: 'Status',  width: 100 ,cellTemplate:'' +
                '<span ng-if="row.entity.IsPosted ===1">'+
                '<span class="label label-success ml-md">Posted</span>'
                + '</span>'+
                '<span ng-if="row.entity.IsPosted ===0">'+
                '<span class="label label-warning ml-md">Unposted</span>'
                +'</span>'
            }
            , {
                name: 'Action', width: 200, enableFiltering: false, cellTemplate:
                    '      <a href="../AcmVoucherGrid/RptPreview/{{row.entity.VoucherId}}?post={{row.entity.IsPosted}}" class="text-info black " data-toggle="tooltip" data-trigger="hover" data-original-title="Print" ' +
                        'onclick="window.open(this.href,\'popUpWindow\',\'height=500,width=700,left=10,top=10,scrollbars=yes,menubar=no\'); return false;">' +
                        '<i class="fa fa-print fa-lg ml-md black" aria-hidden="true" title="Report" data-placement="top" data-delay="500" data-toggle="tooltip"></i>' +
                        '  </a>' +

                        '<span ng-if="row.entity.IsPosted ===0">' +
                        ' <a href="../AcmVoucherGrid/EditBPV/{{row.entity.VoucherId}}" class="ml-xs black ml-lg"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>' +
                        '<a href="javascript:void(0)" class="ml-xs black ml-md" ng-confirm-click="Are you sure to delete this record ?" confirmed-click="grid.appScope.DeleteItem(row.entity.VoucherId)"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>' +
                        '</span>' 

            }

        ];


        /*   Load  : this area load date wise  */
        $scope.DataLoad = function (dtFrom, dtTo) {
            console.log(dtFrom);
            console.log(dtTo);
            $scope.showLoader = true;
            $http({
                method: 'Post',
                url: '../AcmVoucherGrid/GetVoucherList',
                data: JSON.stringify({ dtFrom: $scope.dtFrom, dtTo: $scope.dtTo , vType:'BPV'})
            }).then(function (data) {
                $scope.gridOptions.data = data.data;
                $scope.showLoader = false;
            }, function (error) {
                alert(error);
                console.log(error);
            });
        }
        $scope.DataLoad($scope.dtFrom, $scope.dtTo,'BPV');

        $scope.DeleteItem = function (VoucherId) {
            $scope.showLoader = true;
            $http.post("@Url.Action("prcDeleteData", "AcmVoucherGrid")", { ItemId: VoucherId }).then(function (data) {
                if (data.data == 1) {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Deleted Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.showLoader = false;
                    $scope.DataLoad($scope.dtFrom, $scope.dtTo);

                }
                else {
                    $scope.showLoader = false;
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });
                    $scope.DataLoad($scope.dtFrom, $scope.dtTo);

                }
            });
        }

    }]);
    ngGridApp.directive('datepicker', function ($filter) {
        return {
            restrict: 'A',
            require: 'ngModel',
            compile: function () {
                return {
                    pre: function (scope, element, attrs, ngModelCtrl) {
                        var format, dateObj;
                        format = (!attrs.dpFormat) ? 'dd-M-yyyy' : attrs.dpFormat;
                        if (!attrs.initDate && !attrs.dpFormat) {
                            dateObj = new Date();
                            scope[attrs.ngModel] = $filter("date")(dateObj, 'dd-MMM-yyyy');

                        } else if (!attrs.initDate) {
                            // Otherwise set as the init date
                            scope[attrs.ngModel] = attrs.initDate;
                        } else {
                        }
                        $(element).datepicker({
                            format: format,
                        }).on('changeDate', function (ev) {
                            scope.$apply(function () {
                                ngModelCtrl.$setViewValue(ev.format(format));
                            });
                        });
                    }
                }
            }
        }
    });

    //---------------------- TOOLTIP Use --------------
    ngGridApp.directive('title', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                $(element).hover(function () {
                    // on mouseenter
                    $(element).tooltip('show');
                }, function () {
                    //on mouseleave
                    $(element).tooltip('hide');
                });
            }
        };
    });
    ngGridApp.directive('ngConfirmClick',
        [
            function () {
                return {
                    link: function (scope, element, attr) {
                        var msg = attr.ngConfirmClick || "Are you sure?";
                        var clickAction = attr.confirmedClick;
                        element.bind('click',
                            function (event) {
                                if (window.confirm(msg)) {
                                    scope.$eval(clickAction);
                                }
                            });
                    }
                };
            }
        ]);

</script>
